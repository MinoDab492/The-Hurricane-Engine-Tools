From 4386bbe4283cd973d23ea0a906eb171ab7ee003f Mon Sep 17 00:00:00 2001
From: Alvin Wong <alvinhochun@gmail.com>
Date: Thu, 17 Mar 2022 23:56:51 +0800
Subject: [PATCH] Resize D3D surface to reduce flickering on resize

---
 .../windows/qwindowsbackingstore.cpp          | 19 +++++++++++++++++
 .../platforms/windows/qwindowsbackingstore.h  |  6 ++++++
 .../platforms/windows/qwindowseglcontext.cpp  | 21 +++++++++++++++++++
 .../platforms/windows/qwindowseglcontext.h    |  2 ++
 .../platforms/windows/qwindowsopenglcontext.h |  2 ++
 5 files changed, 50 insertions(+)

diff --git a/src/plugins/platforms/windows/qwindowsbackingstore.cpp b/src/plugins/platforms/windows/qwindowsbackingstore.cpp
index 68807fabdd..9b8faffffd 100644
--- a/src/plugins/platforms/windows/qwindowsbackingstore.cpp
+++ b/src/plugins/platforms/windows/qwindowsbackingstore.cpp
@@ -40,8 +40,10 @@
 #include "qwindowsbackingstore.h"
 #include "qwindowswindow.h"
 #include "qwindowscontext.h"
+#include "qwindowsopenglcontext.h"
 
 #include <QtGui/qwindow.h>
+#include <QtGui/private/qwindow_p.h>
 #include <QtGui/qpainter.h>
 #include <QtFontDatabaseSupport/private/qwindowsnativeimage_p.h>
 #include <private/qhighdpiscaling_p.h>
@@ -220,4 +222,21 @@ QImage QWindowsBackingStore::toImage() const
     return m_image.data()->image();
 }
 
+#ifndef QT_NO_OPENGL
+void QWindowsBackingStore::composeAndFlush(QWindow *window, const QRegion &region, const QPoint &offset,
+                                           QPlatformTextureList *textures,
+                                           bool translucentBackground)
+{
+    QOpenGLContext *context = qt_window_private(window)->shareContext();
+    if (!context) {
+        qCWarning(lcQpaBackingStore) <<__FUNCTION__ << "missing OpenGL context.";
+    } else {
+        QPlatformOpenGLContext *pctx = context->handle();
+        QWindowsOpenGLContext *ctx = static_cast<QWindowsOpenGLContext *>(pctx);
+        ctx->beforeCompose(window);
+    }
+    QPlatformBackingStore::composeAndFlush(window, region, offset, textures, translucentBackground);
+}
+#endif // QT_NO_OPENGL
+
 QT_END_NAMESPACE
diff --git a/src/plugins/platforms/windows/qwindowsbackingstore.h b/src/plugins/platforms/windows/qwindowsbackingstore.h
index 088ab3b257..c55eca741a 100644
--- a/src/plugins/platforms/windows/qwindowsbackingstore.h
+++ b/src/plugins/platforms/windows/qwindowsbackingstore.h
@@ -63,6 +63,12 @@ public:
     bool scroll(const QRegion &area, int dx, int dy) override;
     void beginPaint(const QRegion &) override;
 
+#ifndef QT_NO_OPENGL
+    void composeAndFlush(QWindow *window, const QRegion &region, const QPoint &offset,
+                         QPlatformTextureList *textures,
+                         bool translucentBackground) override;
+#endif
+
     HDC getDC() const;
 
     QImage toImage() const override;
diff --git a/src/plugins/platforms/windows/qwindowseglcontext.cpp b/src/plugins/platforms/windows/qwindowseglcontext.cpp
index 4d2ce9fc05..f847521fb7 100644
--- a/src/plugins/platforms/windows/qwindowseglcontext.cpp
+++ b/src/plugins/platforms/windows/qwindowseglcontext.cpp
@@ -43,6 +43,7 @@
 
 #include <QtCore/qdebug.h>
 #include <QtGui/qopenglcontext.h>
+#include <QtGui/private/qwindow_p.h>
 
 #if defined(QT_OPENGL_ES_2_ANGLE) || defined(QT_OPENGL_DYNAMIC)
 #  include <EGL/eglext.h>
@@ -152,6 +153,7 @@ bool QWindowsLibEGL::init()
     eglSwapBuffers = RESOLVE((EGLBoolean (EGLAPIENTRY *)(EGLDisplay , EGLSurface)), eglSwapBuffers);
     eglGetProcAddress = RESOLVE((QFunctionPointer (EGLAPIENTRY * )(const char *)), eglGetProcAddress);
     eglQueryString = RESOLVE((const char* (EGLAPIENTRY *)(EGLDisplay, EGLint)), eglQueryString);
+    eglWaitNative = RESOLVE((EGLBoolean (EGLAPIENTRY *)(EGLint)), eglWaitNative);
 
     if (!eglGetError || !eglGetDisplay || !eglInitialize || !eglGetProcAddress || !eglQueryString)
         return false;
@@ -795,6 +797,25 @@ QFunctionPointer QWindowsEGLContext::getProcAddress(const char *procName)
     return procAddress;
 }
 
+void QWindowsEGLContext::beforeCompose(QWindow *window)
+{
+    // Resize buffer before composing to prevent window flicker during resize.
+    QOpenGLContext *context = qt_window_private(window)->shareContext();
+    if (!context) {
+        qCWarning(lcQpaGl, "QWindowsEGLContext::beforeCompose: missing OpenGL context");
+        return;
+    }
+    if (!context->makeCurrent(window)) {
+        qCWarning(lcQpaGl, "QWindowsEGLContext::beforeCompose: makeCurrent failed");
+        return;
+    }
+    // The D3D backend checks for buffer resizes inside eglWaitNative.
+    EGLBoolean result = QWindowsEGLStaticContext::libEGL.eglWaitNative(EGL_CORE_NATIVE_ENGINE);
+    if (result == EGL_FALSE) {
+        qCWarning(lcQpaGl, "QWindowsEGLContext::beforeCompose: eglWaitNative failed");
+    }
+}
+
 static QVector<EGLint> createConfigAttributesFromFormat(const QSurfaceFormat &format)
 {
     int redSize     = format.redBufferSize();
diff --git a/src/plugins/platforms/windows/qwindowseglcontext.h b/src/plugins/platforms/windows/qwindowseglcontext.h
index 1cf1236b81..ffe7b8736d 100644
--- a/src/plugins/platforms/windows/qwindowseglcontext.h
+++ b/src/plugins/platforms/windows/qwindowseglcontext.h
@@ -78,6 +78,7 @@ struct QWindowsLibEGL
     EGLDisplay (EGLAPIENTRY * eglGetCurrentDisplay)(void);
     EGLBoolean (EGLAPIENTRY * eglSwapBuffers)(EGLDisplay dpy, EGLSurface surface);
     QFunctionPointer (EGLAPIENTRY *eglGetProcAddress)(const char *procname);
+    EGLBoolean (EGLAPIENTRY * eglWaitNative)(EGLint engine);
 
     EGLDisplay (EGLAPIENTRY * eglGetPlatformDisplayEXT)(EGLenum platform, void *native_display, const EGLint *attrib_list);
     const char* (EGLAPIENTRY * eglQueryString)(EGLDisplay dpy, EGLint name);
@@ -156,6 +157,7 @@ public:
     void doneCurrent() override;
     void swapBuffers(QPlatformSurface *surface) override;
     QFunctionPointer getProcAddress(const char *procName) override;
+    void beforeCompose(QWindow *window) override;
 
     QSurfaceFormat format() const override { return m_format; }
     bool isSharing() const override { return m_shareContext != EGL_NO_CONTEXT; }
diff --git a/src/plugins/platforms/windows/qwindowsopenglcontext.h b/src/plugins/platforms/windows/qwindowsopenglcontext.h
index 61c0e28767..2398f6bec1 100644
--- a/src/plugins/platforms/windows/qwindowsopenglcontext.h
+++ b/src/plugins/platforms/windows/qwindowsopenglcontext.h
@@ -80,6 +80,8 @@ public:
     // Returns the native context handle (e.g. HGLRC for WGL, EGLContext for EGL).
     virtual void *nativeContext() const = 0;
 
+    virtual void beforeCompose(QWindow * /*window*/) { }
+
     // These should be implemented only for some winsys interfaces, for example EGL.
     // For others, like WGL, they are not relevant.
     virtual void *nativeDisplay() const { return 0; }
-- 
2.24.1.windows.2

