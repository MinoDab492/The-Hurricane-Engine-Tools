From 13460c6461f39e49a8abe020a034aaae8d4d657d Mon Sep 17 00:00:00 2001
From: Sharaf Zaman <sharafzaz121@gmail.com>
Date: Thu, 10 Sep 2020 10:46:57 +0000
Subject: [PATCH] Android: Properly handle Tablet events

Prior to this Hover events from stylus/tablet were treated as Mouse
events and primary and secondary stylus buttons weren't handled either.
This commit also passes batched tablet events to Qt.

This commit also extracts the batched events from MotionEvent and passes
them down for Qt to handle.
---
 .../org/qtproject/qt5/android/QtNative.java   | 67 +++++++++++++++----
 .../platforms/android/androidjniinput.cpp     | 15 +++--
 2 files changed, 64 insertions(+), 18 deletions(-)

diff --git a/src/android/jar/src/org/qtproject/qt5/android/QtNative.java b/src/android/jar/src/org/qtproject/qt5/android/QtNative.java
index d76b7c9008..baa75479eb 100644
--- a/src/android/jar/src/org/qtproject/qt5/android/QtNative.java
+++ b/src/android/jar/src/org/qtproject/qt5/android/QtNative.java
@@ -652,7 +652,7 @@ public class QtNative
     }
     //@ANDROID-9
 
-    static public void sendTouchEvent(MotionEvent event, int id)
+    static public boolean sendTouchEvent(MotionEvent event, int id)
     {
         int pointerType = 0;
 
@@ -669,30 +669,64 @@ public class QtNative
         }
 
         if (event.getToolType(0) == MotionEvent.TOOL_TYPE_MOUSE) {
-            sendMouseEvent(event, id);
+            return sendMouseEvent(event, id);
         } else if (m_tabletEventSupported && pointerType != 0) {
+            final int historySize = event.getHistorySize();
+            for (int h = 0; h < historySize; h++) {
+                float tiltRot = event.getHistoricalAxisValue(MotionEvent.AXIS_TILT, h);
+                float orientation = event.getHistoricalAxisValue(MotionEvent.AXIS_ORIENTATION, h);
+
+                float tiltX = (float) Math.toDegrees(-Math.sin(orientation) * tiltRot);
+                float tiltY = (float) Math.toDegrees(Math.cos(orientation) * tiltRot);
+
+                tabletEvent(id, event.getDeviceId(), event.getHistoricalEventTime(h), event.getActionMasked(),
+                            pointerType, event.getButtonState(), event.getHistoricalX(h),
+                            event.getHistoricalY(h), event.getHistoricalPressure(h), tiltX, tiltY,
+                            (float)Math.toDegrees(orientation), event.getMetaState());
+            }
             float tiltRot = event.getAxisValue(MotionEvent.AXIS_TILT);
             float orientation = event.getAxisValue(MotionEvent.AXIS_ORIENTATION);
             float tiltX = (float) Math.toDegrees(-Math.sin(orientation) * tiltRot);
             float tiltY = (float) Math.toDegrees(Math.cos(orientation) * tiltRot);
-            tabletEvent(id, event.getDeviceId(), event.getEventTime(), event.getAction(), pointerType,
+            tabletEvent(id, event.getDeviceId(), event.getEventTime(), event.getActionMasked(), pointerType,
                 event.getButtonState(), event.getX(), event.getY(), event.getPressure(), tiltX, tiltY,
                 (float) Math.toDegrees(orientation), event.getMetaState());
+            return true;
         } else {
+            final int historySize = event.getHistorySize();
             touchBegin(id);
-            for (int i = 0; i < event.getPointerCount(); ++i) {
+            // batched ones
+            for (int h = 0; h < historySize; h++) {
+                touchBegin(id);
+                for (int i = 0; i < event.getPointerCount(); ++i) {
                     touchAdd(id,
                              event.getPointerId(i),
                              getAction(i, event),
                              i == 0,
-                             (int)event.getX(i),
-                             (int)event.getY(i),
-                             event.getTouchMajor(i),
-                             event.getTouchMinor(i),
-                             event.getOrientation(i),
-                             event.getPressure(i));
+                             (int)event.getHistoricalX(i, h),
+                             (int)event.getHistoricalY(i, h),
+                             event.getHistoricalTouchMajor(i, h),
+                             event.getHistoricalTouchMinor(i, h),
+                             event.getHistoricalOrientation(i, h),
+                             event.getHistoricalPressure(i, h));
+                }
+                touchEnd(id, event.getAction());
+            }
+            touchBegin(id);
+            for (int i = 0; i < event.getPointerCount(); ++i) {
+                touchAdd(id,
+                        event.getPointerId(i),
+                        getAction(i, event),
+                        i == 0,
+                        (int)event.getX(i),
+                        (int)event.getY(i),
+                        event.getTouchMajor(i),
+                        event.getTouchMinor(i),
+                        event.getOrientation(i),
+                        event.getPressure(i));
             }
             touchEnd(id, event.getAction());
+            return true;
         }
     }
 
@@ -703,12 +737,19 @@ public class QtNative
 
     static public boolean sendGenericMotionEvent(MotionEvent event, int id)
     {
-        if (((event.getAction() & (MotionEvent.ACTION_SCROLL | MotionEvent.ACTION_HOVER_MOVE)) == 0)
-                || (event.getSource() & InputDevice.SOURCE_CLASS_POINTER) != InputDevice.SOURCE_CLASS_POINTER) {
+        if (!event.isFromSource(InputDevice.SOURCE_CLASS_POINTER)) {
             return false;
         }
 
-        return sendMouseEvent(event, id);
+        if (event.isFromSource(InputDevice.SOURCE_MOUSE)) {
+                return sendMouseEvent(event, id);
+        } else if ((event.getSource() & (InputDevice.SOURCE_STYLUS |
+                                         InputDevice.SOURCE_TOUCHPAD |
+                                         InputDevice.SOURCE_TOUCHSCREEN)) != 0) {
+
+            return sendTouchEvent(event, id);
+        }
+        return false;
     }
 
     static public boolean sendMouseEvent(MotionEvent event, int id)
diff --git a/src/plugins/platforms/android/androidjniinput.cpp b/src/plugins/platforms/android/androidjniinput.cpp
index 870b22e15e..fec394f95e 100644
--- a/src/plugins/platforms/android/androidjniinput.cpp
+++ b/src/plugins/platforms/android/androidjniinput.cpp
@@ -380,14 +380,19 @@ namespace QtAndroidInput
         // when action == ACTION_UP (1) it's a release; otherwise we say which button is pressed
         Qt::MouseButtons buttons = Qt::NoButton;
         switch (action) {
-        case 1:     // ACTION_UP
-        case 212:   // stylus release while side-button held on Galaxy Note 4
+        case AMOTION_EVENT_ACTION_UP:
             buttons = Qt::NoButton;
             break;
-        default:    // action is press or drag
-            if (buttonState == 0)
+        case AMOTION_EVENT_ACTION_MOVE:
+        case AMOTION_EVENT_ACTION_DOWN:
+            if (!buttonState)
                 buttons = Qt::LeftButton;
-            else // 2 means RightButton
+        default:
+            if (buttonState == AMOTION_EVENT_BUTTON_STYLUS_PRIMARY)
+                buttons = Qt::MiddleButton;
+            else if (buttonState == AMOTION_EVENT_BUTTON_STYLUS_SECONDARY)
+                buttons = Qt::RightButton;
+            else if (buttonState)
                 buttons = Qt::MouseButtons(buttonState);
             break;
         }
-- 
2.34.1

