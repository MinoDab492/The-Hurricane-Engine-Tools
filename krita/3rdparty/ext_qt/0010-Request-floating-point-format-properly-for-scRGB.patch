From a15844e6d0a1ef355c697f9878b583f300f407b9 Mon Sep 17 00:00:00 2001
From: Alvin Wong <alvinhochun@gmail.com>
Date: Tue, 15 Mar 2022 21:11:37 +0800
Subject: [PATCH] Request floating-point format properly for scRGB

`EGL_EXT_gl_colorspace_scrgb_linear` uses floating-point surface
formats. When calling `eglChooseConfig` for an scRGB surface, we must
pass the attribute `EGL_COLOR_COMPONENT_TYPE_EXT` with the value
`EGL_COLOR_COMPONENT_TYPE_FLOAT_EXT` to request a floating-point format.
Otherwise, `EXT_pixel_format_float` specifies that its default value
will be `EGL_COLOR_COMPONENT_TYPE_FIXED_EXT`.

It used to work with Qt's copy of ANGLE without specifying this
attribute because it did not have such defaults. proper defaults were
implemented for upstream ANGLE in 2019 [1], therefore it is now
necessary to specify this attribute for it to work (and to be
compliant).
---
 .../platforms/windows/qwindowseglcontext.cpp  | 19 ++++++++++++++++++-
 .../platforms/windows/qwindowseglcontext.h    |  3 +++
 2 files changed, 21 insertions(+), 1 deletion(-)

diff --git a/src/plugins/platforms/windows/qwindowseglcontext.cpp b/src/plugins/platforms/windows/qwindowseglcontext.cpp
index fc1b3a7..4d2ce9f 100644
--- a/src/plugins/platforms/windows/qwindowseglcontext.cpp
+++ b/src/plugins/platforms/windows/qwindowseglcontext.cpp
@@ -201,12 +201,17 @@ QWindowsEGLStaticContext::QWindowsEGLStaticContext(EGLDisplay display)
     : m_display(display),
       m_hasSRGBColorSpaceSupport(false),
       m_hasSCRGBColorSpaceSupport(false),
-      m_hasBt2020PQColorSpaceSupport(false)
+      m_hasBt2020PQColorSpaceSupport(false),
+      m_hasPixelFormatFloatSupport(false)
 {
     const char *eglExtensions = libEGL.eglQueryString(display, EGL_EXTENSIONS);
     m_hasSRGBColorSpaceSupport = strstr(eglExtensions, "EGL_KHR_gl_colorspace") != nullptr;
     m_hasSCRGBColorSpaceSupport = strstr(eglExtensions, "EGL_EXT_gl_colorspace_scrgb_linear") != nullptr;
     m_hasBt2020PQColorSpaceSupport = strstr(eglExtensions, "EGL_EXT_gl_colorspace_bt2020_pq") != nullptr;
+    m_hasPixelFormatFloatSupport = strstr(eglExtensions, "EGL_EXT_pixel_format_float") != nullptr;
+    if (m_hasSCRGBColorSpaceSupport && !m_hasPixelFormatFloatSupport) {
+        qWarning("EGL: EGL_EXT_gl_colorspace_scrgb_linear supported but EGL_EXT_pixel_format_float not available!");
+    }
 }
 
 bool QWindowsEGLStaticContext::initializeAngle(QWindowsOpenGLTester::Renderers preferredType, HDC dc,
@@ -912,6 +917,18 @@ EGLConfig QWindowsEGLContext::chooseConfig(const QSurfaceFormat &format)
     configureAttributes.append(EGL_WINDOW_BIT);
     configureAttributes.append(EGL_RENDERABLE_TYPE);
     configureAttributes.append(EGL_OPENGL_ES2_BIT);
+    if (format.colorSpace() == QSurfaceFormat::scRGBColorSpace) {
+        if (m_staticContext->hasPixelFormatFloatSupport()) {
+#if defined(QT_OPENGL_ES_2_ANGLE) || defined(QT_OPENGL_DYNAMIC)
+            configureAttributes.append(EGL_COLOR_COMPONENT_TYPE_EXT);
+            configureAttributes.append(EGL_COLOR_COMPONENT_TYPE_FLOAT_EXT);
+#else
+            qWarning("EGL: scRGB requested but we are not using ANGLE!");
+#endif
+        } else {
+            qWarning("EGL: scRGB requested but EGL_EXT_pixel_format_float not available!");
+        }
+    }
     configureAttributes.append(EGL_NONE);
 
     EGLDisplay display = m_staticContext->display();
diff --git a/src/plugins/platforms/windows/qwindowseglcontext.h b/src/plugins/platforms/windows/qwindowseglcontext.h
index 9f7742e..1cf1236 100644
--- a/src/plugins/platforms/windows/qwindowseglcontext.h
+++ b/src/plugins/platforms/windows/qwindowseglcontext.h
@@ -127,6 +127,8 @@ public:
 
     QSurfaceFormat formatFromConfig(EGLDisplay display, EGLConfig config, const QSurfaceFormat &referenceFormat);
 
+    bool hasPixelFormatFloatSupport() const { return m_hasPixelFormatFloatSupport; }
+
     static QWindowsLibEGL libEGL;
     static QWindowsLibGLESv2 libGLESv2;
 
@@ -139,6 +141,7 @@ private:
     bool m_hasSRGBColorSpaceSupport;
     bool m_hasSCRGBColorSpaceSupport;
     bool m_hasBt2020PQColorSpaceSupport;
+    bool m_hasPixelFormatFloatSupport;
 };
 
 class QWindowsEGLContext : public QWindowsOpenGLContext
-- 
2.24.1.windows.2

