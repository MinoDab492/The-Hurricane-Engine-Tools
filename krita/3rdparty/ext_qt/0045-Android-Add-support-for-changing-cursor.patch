From 67a74e329b4cd803f4470de0302d73f5dac9c9a3 Mon Sep 17 00:00:00 2001
From: Sharaf Zaman <shzam@sdf.org>
Date: Tue, 21 Sep 2021 10:14:23 +0000
Subject: [PATCH 45/46] Android: Add support for changing cursor

---
 src/android/jar/jar.pro                       |   1 +
 .../qtproject/qt5/android/QtPointerIcon.java  | 129 ++++++++++++++++++
 .../org/qtproject/qt5/android/QtSurface.java  |  11 +-
 .../qtproject/qt5/android/SAFFileManager.java |   4 +-
 src/plugins/platforms/android/android.pro     |   6 +-
 .../android/qandroidplatformcursor.cpp        |  70 ++++++++++
 .../android/qandroidplatformcursor.h          |  22 +++
 .../android/qandroidplatformscreen.cpp        |   5 +-
 .../android/qandroidplatformscreen.h          |   3 +
 9 files changed, 242 insertions(+), 9 deletions(-)
 create mode 100644 src/android/jar/src/org/qtproject/qt5/android/QtPointerIcon.java
 create mode 100644 src/plugins/platforms/android/qandroidplatformcursor.cpp
 create mode 100644 src/plugins/platforms/android/qandroidplatformcursor.h

diff --git a/src/android/jar/jar.pro b/src/android/jar/jar.pro
index 6a610c511d..ccd0f21dde 100644
--- a/src/android/jar/jar.pro
+++ b/src/android/jar/jar.pro
@@ -25,6 +25,7 @@ JAVASOURCES += \
     $$PATHPREFIX/EditContextView.java \
     $$PATHPREFIX/EditPopupMenu.java \
     $$PATHPREFIX/CursorHandle.java \
+    $$PATHPREFIX/QtPointerIcon.java \
     $$PATHPREFIX/QtThread.java
 
 # install
diff --git a/src/android/jar/src/org/qtproject/qt5/android/QtPointerIcon.java b/src/android/jar/src/org/qtproject/qt5/android/QtPointerIcon.java
new file mode 100644
index 0000000000..723f0f5992
--- /dev/null
+++ b/src/android/jar/src/org/qtproject/qt5/android/QtPointerIcon.java
@@ -0,0 +1,129 @@
+package org.qtproject.qt5.android;
+
+import android.app.Activity;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.os.Build;
+import android.util.Log;
+import android.util.LruCache;
+import android.view.PointerIcon;
+
+@SuppressWarnings("unused")
+class CursorShape {
+    public static final int ArrowCursor = 0;
+    public static final int UpArrowCursor = 1;
+    public static final int CrossCursor = 2;
+    public static final int WaitCursor = 3;
+    public static final int IBeamCursor = 4;
+    public static final int SizeVerCursor = 5;
+    public static final int SizeHorCursor = 6;
+    public static final int SizeBDiagCursor = 7;
+    public static final int SizeFDiagCursor = 8;
+    public static final int SizeAllCursor = 9;
+    public static final int BlankCursor = 10;
+    public static final int SplitVCursor = 11;
+    public static final int SplitHCursor = 12;
+    public static final int PointingHandCursor = 13;
+    public static final int ForbiddenCursor = 14;
+    public static final int WhatsThisCursor = 15;
+    public static final int BusyCursor = 16;
+    public static final int OpenHandCursor = 17;
+    public static final int ClosedHandCursor = 18;
+    public static final int DragCopyCursor = 19;
+    public static final int DragMoveCursor = 20;
+    public static final int DragLinkCursor = 21;
+    public static final int LastCursor = DragLinkCursor;
+    public static final int BitmapCursor = 24;
+    public static final int CustomCursor = 5;
+
+    public static PointerIcon getPointerIconQt(int type) {
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {
+            return null;
+        }
+        switch (type) {
+            case ArrowCursor:
+                    return PointerIcon.getSystemIcon(QtNative.getContext(), PointerIcon.TYPE_ARROW);
+            case CrossCursor:
+                return PointerIcon.getSystemIcon(QtNative.getContext(), PointerIcon.TYPE_CROSSHAIR);
+            case WaitCursor:
+                return PointerIcon.getSystemIcon(QtNative.getContext(), PointerIcon.TYPE_WAIT);
+            case BlankCursor:
+                return PointerIcon.getSystemIcon(QtNative.getContext(), PointerIcon.TYPE_NULL);
+            case IBeamCursor:
+                return PointerIcon.getSystemIcon(QtNative.getContext(), PointerIcon.TYPE_TEXT);
+            case SizeBDiagCursor:
+                return PointerIcon.getSystemIcon(QtNative.getContext(), PointerIcon.TYPE_TOP_RIGHT_DIAGONAL_DOUBLE_ARROW);
+            case SizeFDiagCursor:
+                return PointerIcon.getSystemIcon(QtNative.getContext(), PointerIcon.TYPE_TOP_LEFT_DIAGONAL_DOUBLE_ARROW);
+            case SplitVCursor:
+            case SizeVerCursor:
+                return PointerIcon.getSystemIcon(QtNative.getContext(), PointerIcon.TYPE_VERTICAL_DOUBLE_ARROW);
+            case SplitHCursor:
+            case SizeHorCursor:
+                return PointerIcon.getSystemIcon(QtNative.getContext(), PointerIcon.TYPE_HORIZONTAL_DOUBLE_ARROW);
+            case PointingHandCursor:
+                return PointerIcon.getSystemIcon(QtNative.getContext(), PointerIcon.TYPE_HAND);
+            case ForbiddenCursor:
+                return PointerIcon.getSystemIcon(QtNative.getContext(), PointerIcon.TYPE_NO_DROP);
+            case OpenHandCursor:
+                return PointerIcon.getSystemIcon(QtNative.getContext(), PointerIcon.TYPE_GRAB);
+            case ClosedHandCursor:
+                return PointerIcon.getSystemIcon(QtNative.getContext(), PointerIcon.TYPE_GRABBING);
+            case DragMoveCursor:
+            case DragCopyCursor:
+                return PointerIcon.getSystemIcon(QtNative.getContext(), PointerIcon.TYPE_COPY);
+            default:
+                return PointerIcon.getSystemIcon(QtNative.getContext(), PointerIcon.TYPE_DEFAULT);
+        }
+    }
+}
+
+@SuppressWarnings("UnusedDeclaration")
+public class QtPointerIcon {
+
+    private static final String TAG = "QtPointerIcon";
+    private static QtPointerIcon sQtPointer;
+    // we cache on Java side, passing data over Jni can be expensive
+    private final LruCache<Long, PointerIcon> iconCache = new LruCache<>(10);
+    private PointerIcon icon;
+
+    public static QtPointerIcon instance() {
+        if (sQtPointer == null) {
+            sQtPointer = new QtPointerIcon();
+        }
+        return sQtPointer;
+    }
+
+    public PointerIcon getIcon() {
+        return icon;
+    }
+
+    public void setIcon(int type) {
+        // TODO(sh_zam): setPointerIcon?
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
+            icon = CursorShape.getPointerIconQt(type);
+        }
+    }
+
+    public void setCachedBitmapIcon(long cacheKey) {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
+            icon = iconCache.get(cacheKey);
+        }
+    }
+
+    public void setBitmapIcon(byte[] colors, int w, int h, int hX, int hY, long cacheKey) {
+        Bitmap bitmap = BitmapFactory.decodeByteArray(colors, 0, colors.length);
+        if (bitmap == null) {
+            Log.e(TAG, "PointerIcon bitmap is null!");
+            return;
+        }
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
+            icon = PointerIcon.create(bitmap, hX, hY);
+            iconCache.put(cacheKey, icon);
+        }
+    }
+
+    public boolean existsInCache(long key) {
+        return iconCache.get(key) != null;
+    }
+}
diff --git a/src/android/jar/src/org/qtproject/qt5/android/QtSurface.java b/src/android/jar/src/org/qtproject/qt5/android/QtSurface.java
index 723a783c6b..8b9f581ef0 100644
--- a/src/android/jar/src/org/qtproject/qt5/android/QtSurface.java
+++ b/src/android/jar/src/org/qtproject/qt5/android/QtSurface.java
@@ -40,15 +40,13 @@
 
 package org.qtproject.qt5.android;
 
-import android.app.Activity;
 import android.content.Context;
 import android.graphics.PixelFormat;
+import android.view.MotionEvent;
+import android.view.PointerIcon;
 import android.view.SurfaceHolder;
 import android.view.SurfaceView;
 
-import java.lang.reflect.Constructor;
-import java.lang.reflect.Method;
-
 public class QtSurface extends SurfaceView implements SurfaceHolder.Callback
 {
     private Object m_accessibilityDelegate = null;
@@ -87,4 +85,9 @@ public class QtSurface extends SurfaceView implements SurfaceHolder.Callback
     {
         QtNative.setSurface(getId(), null, 0, 0);
     }
+
+    @Override
+    public PointerIcon onResolvePointerIcon(MotionEvent event, int pointerIndex) {
+        return QtPointerIcon.instance().getIcon();
+    }
 }
diff --git a/src/android/jar/src/org/qtproject/qt5/android/SAFFileManager.java b/src/android/jar/src/org/qtproject/qt5/android/SAFFileManager.java
index f4f097efcf..df5868d67a 100644
--- a/src/android/jar/src/org/qtproject/qt5/android/SAFFileManager.java
+++ b/src/android/jar/src/org/qtproject/qt5/android/SAFFileManager.java
@@ -671,11 +671,11 @@ public class SAFFileManager {
             }
 
             while (cursor.moveToNext()) {
-                final String docId = cursor.getString(1);
+                final String docId = SAFUtils.getColumnValStringOrNull(cursor, DocumentsContract.Document.COLUMN_DOCUMENT_ID);
                 final Uri fileUri = DocumentsContract.buildDocumentUriUsingTree(documentTreeUri, docId);
                 cachedDocumentFiles.add(new CachedDocumentFile(mCtx,
                         SAFUtils.getColumnValStringOrNull(cursor, DocumentsContract.Document.COLUMN_DISPLAY_NAME),
-                        SAFUtils.getColumnValStringOrNull(cursor, DocumentsContract.Document.COLUMN_DOCUMENT_ID),
+                        docId,
                         SAFUtils.getColumnValStringOrNull(cursor, DocumentsContract.Document.COLUMN_MIME_TYPE),
                         SAFUtils.getColumnValIntegerOrDefault(cursor, DocumentsContract.Document.COLUMN_SIZE, -1),
                         fileUri));
diff --git a/src/plugins/platforms/android/android.pro b/src/plugins/platforms/android/android.pro
index 8f62cb4c1e..92a7572563 100644
--- a/src/plugins/platforms/android/android.pro
+++ b/src/plugins/platforms/android/android.pro
@@ -49,7 +49,8 @@ SOURCES += $$PWD/androidplatformplugin.cpp \
            $$PWD/qandroideventdispatcher.cpp \
            $$PWD/qandroidplatformoffscreensurface.cpp \
            $$PWD/qandroidplatformfiledialoghelper.cpp \
-           $$PWD/qandroidplatformwindowmanager.cpp
+           $$PWD/qandroidplatformwindowmanager.cpp \
+           $$PWD/qandroidplatformcursor.cpp
 
 HEADERS += $$PWD/qandroidplatformintegration.h \
            $$PWD/androidcontentfileengine.h \
@@ -81,7 +82,8 @@ HEADERS += $$PWD/qandroidplatformintegration.h \
            $$PWD/qandroideventdispatcher.h \
            $$PWD/qandroidplatformoffscreensurface.h \
            $$PWD/qandroidplatformfiledialoghelper.h \
-           $$PWD/qandroidplatformwindowmanager.h
+           $$PWD/qandroidplatformwindowmanager.h \
+           $$PWD/qandroidplatformcursor.h
 
 qtConfig(android-style-assets): SOURCES += $$PWD/extract.cpp
 else: SOURCES += $$PWD/extract-dummy.cpp
diff --git a/src/plugins/platforms/android/qandroidplatformcursor.cpp b/src/plugins/platforms/android/qandroidplatformcursor.cpp
new file mode 100644
index 0000000000..025093066e
--- /dev/null
+++ b/src/plugins/platforms/android/qandroidplatformcursor.cpp
@@ -0,0 +1,70 @@
+#include "qandroidplatformcursor.h"
+#include "qandroidplatformscreen.h"
+#include <QBitmap>
+#include <QBuffer>
+#include <QPixmap>
+#include <QtCore/private/qjnihelpers_p.h>
+#include <androidjnimain.h>
+#include <private/qguiapplication_p.h>
+#include <private/qhighdpiscaling_p.h>
+#include <private/qjni_p.h>
+#include <qpa/qplatformwindow.h>
+
+QAndroidPlatformCursor::QAndroidPlatformCursor(QAndroidPlatformScreen *screen)
+    : m_qtPointer(QJNIObjectPrivate::callStaticObjectMethod(
+        "org/qtproject/qt5/android/QtPointerIcon", "instance",
+        "()Lorg/qtproject/qt5/android/QtPointerIcon;"))
+    , m_screen(screen)
+{
+}
+
+void QAndroidPlatformCursor::changeCursor(QCursor *cursor, QWindow *window)
+{
+    if (!window || !window->handle()) {
+        return;
+    }
+
+    if (cursor) {
+        if (cursor->shape() == Qt::BitmapCursor) {
+            QImage bitmap = cursor->bitmap()->toImage();
+            qint64 key = cursor->bitmap()->cacheKey();
+            bool exists = m_qtPointer.callMethod<jboolean>("existsInCache", "(J)Z", key);
+            if (exists) {
+                m_qtPointer.callMethod<void>("setCachedBitmapIcon", "(J)V", key);
+                return;
+            }
+
+            QImage mask = cursor->mask()->toImage().convertToFormat(QImage::Format_Mono);
+            mask.invertPixels();
+            bitmap.setAlphaChannel(mask);
+
+            QByteArray bytes;
+            QBuffer buffer(&bytes);
+            buffer.open(QIODevice::WriteOnly);
+            bitmap.save(&buffer, "PNG");
+
+            jbyte *pixels = (jbyte *)bytes.data();
+
+            QJNIEnvironmentPrivate env;
+            // we don't need to release the memory since we don't pin it
+            jbyteArray array = env->NewByteArray(bytes.size());
+            env->SetByteArrayRegion(array, 0, bytes.size(), pixels);
+
+            m_qtPointer.callMethod<void>(
+                "setBitmapIcon", "([BIIIIJ)V", array, bitmap.width(), bitmap.height(),
+                cursor->hotSpot().x(), cursor->hotSpot().y(), key);
+        } else {
+            m_qtPointer.callMethod<void>("setIcon", "(I)V",
+                                         static_cast<int>(cursor->shape()));
+        }
+    } else {
+        m_qtPointer.callMethod<void>("setIcon", "(I)V",
+                                     static_cast<int>(Qt::BlankCursor));
+    }
+}
+
+QPoint QAndroidPlatformCursor::pos() const
+{
+    return QHighDpi::toNativePixels(QGuiApplicationPrivate::lastCursorPosition.toPoint(),
+                                    m_screen->screen());
+}
diff --git a/src/plugins/platforms/android/qandroidplatformcursor.h b/src/plugins/platforms/android/qandroidplatformcursor.h
new file mode 100644
index 0000000000..81a3225f32
--- /dev/null
+++ b/src/plugins/platforms/android/qandroidplatformcursor.h
@@ -0,0 +1,22 @@
+#ifndef __QANDROIDPLATFORMCURSOR_H_
+#define __QANDROIDPLATFORMCURSOR_H_
+
+#include <private/qjni_p.h>
+#include <qpa/qplatformcursor.h>
+
+class QAndroidPlatformScreen;
+
+class QAndroidPlatformCursor : public QPlatformCursor
+{
+public:
+    explicit QAndroidPlatformCursor(QAndroidPlatformScreen *screen);
+
+    void changeCursor(QCursor *windowCursor, QWindow *window) override;
+    QPoint pos() const override;
+
+private:
+    QJNIObjectPrivate m_qtPointer;
+    QAndroidPlatformScreen *m_screen;
+};
+
+#endif // __QANDROIDPLATFORMCURSOR_H_
diff --git a/src/plugins/platforms/android/qandroidplatformscreen.cpp b/src/plugins/platforms/android/qandroidplatformscreen.cpp
index 61ab6f58c7..891c2c372b 100644
--- a/src/plugins/platforms/android/qandroidplatformscreen.cpp
+++ b/src/plugins/platforms/android/qandroidplatformscreen.cpp
@@ -51,6 +51,7 @@
 #include "androidjnimenu.h"
 #include "androiddeadlockprotector.h"
 #include "qandroidplatformwindowmanager.h"
+#include "qandroidplatformcursor.h"
 
 #include <android/bitmap.h>
 #include <android/native_window_jni.h>
@@ -89,7 +90,9 @@ private:
 #endif
 
 QAndroidPlatformScreen::QAndroidPlatformScreen()
-    : QObject(), QPlatformScreen()
+    : QObject()
+    , QPlatformScreen()
+    , m_cursor(new QAndroidPlatformCursor(this))
 {
     m_availableGeometry = QRect(0, 0, QAndroidPlatformIntegration::m_defaultGeometryWidth, QAndroidPlatformIntegration::m_defaultGeometryHeight);
     m_size = QSize(QAndroidPlatformIntegration::m_defaultScreenWidth, QAndroidPlatformIntegration::m_defaultScreenHeight);
diff --git a/src/plugins/platforms/android/qandroidplatformscreen.h b/src/plugins/platforms/android/qandroidplatformscreen.h
index 878e33546a..1d489d77a4 100644
--- a/src/plugins/platforms/android/qandroidplatformscreen.h
+++ b/src/plugins/platforms/android/qandroidplatformscreen.h
@@ -85,6 +85,8 @@ public:
     void topWindowChanged(QWindow *w);
     int rasterSurfaces();
 
+    QPlatformCursor *cursor() const override { return m_cursor.data(); }
+
 public slots:
     void setDirty(const QRect &rect);
     void setPhysicalSize(const QSize &size);
@@ -124,6 +126,7 @@ private:
     QWaitCondition m_surfaceWaitCondition;
     QSize m_size;
     QMap<int, QAndroidPlatformWindowManager *> m_windowManagers;
+    QScopedPointer<QPlatformCursor> m_cursor;
 };
 
 QT_END_NAMESPACE
-- 
2.33.0

