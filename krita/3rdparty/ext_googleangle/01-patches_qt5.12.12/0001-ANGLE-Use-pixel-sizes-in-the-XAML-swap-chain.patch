From 2dc3f1bd5ba301af2de5066ff3d09ccc9b8cbdd2 Mon Sep 17 00:00:00 2001
From: Oliver Wolff <oliver.wolff@qt.io>
Date: Wed, 22 Aug 2018 09:21:04 +0200
Subject: [PATCH 01/17] ANGLE: Use pixel sizes in the XAML swap chain

This is necessary for Qt applications, as they render to GL in physical
pixels. This is consistent with the CoreWindow swap chain behavior.

In order to achieve proper scaling, the scale factor has to be initialized
properly in InspectableNativeWindow.

This change only affects Windows Runtime targets.

Change-Id: I92a365f33752ed49c960e390bbf89cc33ccc8004
---
 .../d3d11/winrt/CoreWindowNativeWindow.cpp    | 25 ------------------
 .../d3d/d3d11/winrt/CoreWindowNativeWindow.h  |  1 -
 .../d3d11/winrt/InspectableNativeWindow.cpp   | 26 ++++++++++++++++---
 .../d3d/d3d11/winrt/InspectableNativeWindow.h |  7 ++++-
 4 files changed, 29 insertions(+), 30 deletions(-)

diff --git a/src/libANGLE/renderer/d3d/d3d11/winrt/CoreWindowNativeWindow.cpp b/src/libANGLE/renderer/d3d/d3d11/winrt/CoreWindowNativeWindow.cpp
index 7d3f078d6..22e3c65a7 100644
--- a/src/libANGLE/renderer/d3d/d3d11/winrt/CoreWindowNativeWindow.cpp
+++ b/src/libANGLE/renderer/d3d/d3d11/winrt/CoreWindowNativeWindow.cpp
@@ -210,29 +210,4 @@ HRESULT GetCoreWindowSizeInPixels(const ComPtr<ABI::Windows::UI::Core::ICoreWind
 
     return result;
 }
-
-static float GetLogicalDpi()
-{
-    ComPtr<ABI::Windows::Graphics::Display::IDisplayPropertiesStatics> displayProperties;
-
-    if (SUCCEEDED(GetActivationFactory(
-            HStringReference(RuntimeClass_Windows_Graphics_Display_DisplayProperties).Get(),
-            displayProperties.GetAddressOf())))
-    {
-        float dpi = 96.0f;
-        if (SUCCEEDED(displayProperties->get_LogicalDpi(&dpi)))
-        {
-            return dpi;
-        }
-    }
-
-    // Return 96 dpi as a default if display properties cannot be obtained.
-    return 96.0f;
-}
-
-float ConvertDipsToPixels(float dips)
-{
-    static const float dipsPerInch = 96.0f;
-    return dips * GetLogicalDpi() / dipsPerInch;
-}
 }  // namespace rx
diff --git a/src/libANGLE/renderer/d3d/d3d11/winrt/CoreWindowNativeWindow.h b/src/libANGLE/renderer/d3d/d3d11/winrt/CoreWindowNativeWindow.h
index 044f3d3b6..4e418b985 100644
--- a/src/libANGLE/renderer/d3d/d3d11/winrt/CoreWindowNativeWindow.h
+++ b/src/libANGLE/renderer/d3d/d3d11/winrt/CoreWindowNativeWindow.h
@@ -21,7 +21,6 @@ typedef ABI::Windows::Foundation::
 
 namespace rx
 {
-float ConvertDipsToPixels(float dips);
 
 class CoreWindowNativeWindow : public InspectableNativeWindow,
                                public std::enable_shared_from_this<CoreWindowNativeWindow>
diff --git a/src/libANGLE/renderer/d3d/d3d11/winrt/InspectableNativeWindow.cpp b/src/libANGLE/renderer/d3d/d3d11/winrt/InspectableNativeWindow.cpp
index 0317120b7..e4ef5eca9 100644
--- a/src/libANGLE/renderer/d3d/d3d11/winrt/InspectableNativeWindow.cpp
+++ b/src/libANGLE/renderer/d3d/d3d11/winrt/InspectableNativeWindow.cpp
@@ -290,8 +290,28 @@ HRESULT GetOptionalSinglePropertyValue(
 
 RECT InspectableNativeWindow::clientRect(const Size &size)
 {
-    // We don't have to check if a swapchain scale was specified here; the default value is 1.0f
-    // which will have no effect.
-    return {0, 0, lround(size.Width * mSwapChainScale), lround(size.Height * mSwapChainScale)};
+    return {0, 0, static_cast<long>(ConvertDipsToPixels(size.Width)),
+                static_cast<long>(ConvertDipsToPixels(size.Height))};
+}
+
+float GetLogicalDpi()
+{
+    ComPtr<ABI::Windows::Graphics::Display::IDisplayPropertiesStatics> displayProperties;
+    float dpi = 96.0f;
+
+    if (SUCCEEDED(GetActivationFactory(HStringReference(RuntimeClass_Windows_Graphics_Display_DisplayProperties).Get(), displayProperties.GetAddressOf())))
+    {
+        if (SUCCEEDED(displayProperties->get_LogicalDpi(&dpi)))
+        {
+            return dpi;
+        }
+    }
+    return dpi;
+}
+
+float ConvertDipsToPixels(float dips)
+{
+    static const float dipsPerInch = 96.0f;
+    return lround((dips * GetLogicalDpi() / dipsPerInch));
 }
 }  // namespace rx
diff --git a/src/libANGLE/renderer/d3d/d3d11/winrt/InspectableNativeWindow.h b/src/libANGLE/renderer/d3d/d3d11/winrt/InspectableNativeWindow.h
index 64016b08f..e6e037a86 100644
--- a/src/libANGLE/renderer/d3d/d3d11/winrt/InspectableNativeWindow.h
+++ b/src/libANGLE/renderer/d3d/d3d11/winrt/InspectableNativeWindow.h
@@ -31,6 +31,9 @@ using namespace ABI::Windows::Foundation::Collections;
 
 namespace rx
 {
+float ConvertDipsToPixels(float dips);
+float GetLogicalDpi();
+
 class InspectableNativeWindow
 {
   public:
@@ -38,12 +41,14 @@ class InspectableNativeWindow
         : mSupportsSwapChainResize(true),
           mSwapChainSizeSpecified(false),
           mSwapChainScaleSpecified(false),
-          mSwapChainScale(1.0f),
           mClientRectChanged(false),
           mClientRect({0, 0, 0, 0}),
           mNewClientRect({0, 0, 0, 0})
     {
         mSizeChangedEventToken.value = 0;
+        mSwapChainScale = 96.0f / GetLogicalDpi();
+        if (mSwapChainScale != 1.0f)
+            mSwapChainScaleSpecified = true;
     }
     virtual ~InspectableNativeWindow() {}
 
-- 
2.24.1.windows.2

